// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/labstack/echo/v4"
	"github.com/vnurhaqiqi/go-echo-starter/configs"
	"github.com/vnurhaqiqi/go-echo-starter/internal/app/handlers"
	"github.com/vnurhaqiqi/go-echo-starter/internal/app/repositories"
	"github.com/vnurhaqiqi/go-echo-starter/internal/app/services"
	"github.com/vnurhaqiqi/go-echo-starter/internal/infra/database"
)

// Injectors from wire.go:

// Initialize provides the dependencies for the application
func Initialize(cfg *configs.Config) (*echo.Echo, error) {
	mySQLConn := database.ProvideMySQLConn(cfg)
	repositoryRegistry := repositories.ProvideRepositoryRegistry(mySQLConn)
	serviceRegistry := services.ProvideServiceRegistry(repositoryRegistry)
	handlerRegistry := handlers.ProvideHandlerRegistry(serviceRegistry)
	echoEcho := ProvideEcho(handlerRegistry)
	return echoEcho, nil
}

// wire.go:

// ProvideEcho creates and provides a new Echo instance
func ProvideEcho(handlerRegistry *handlers.HandlerRegistry) *echo.Echo {
	e := echo.New()

	RegisterHealthCheck(e)

	v1 := e.Group("/v1")
	handlerRegistry.RegisterRoutes(v1)

	return e
}

// RegisterHealthCheck registers the health check route
func RegisterHealthCheck(e *echo.Echo) {
	e.GET("/health", func(c echo.Context) error {
		return c.JSON(200, map[string]interface{}{
			"status": "ok",
		})
	})
}
