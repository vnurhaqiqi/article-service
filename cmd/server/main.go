package main

import (
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/rs/zerolog/log"
	echoSwagger "github.com/swaggo/echo-swagger"
	"github.com/vnurhaqiqi/go-echo-starter/configs"
	"github.com/vnurhaqiqi/go-echo-starter/internal/app"
	"github.com/vnurhaqiqi/go-echo-starter/internal/infra/logger"

	_ "github.com/vnurhaqiqi/go-echo-starter/docs" // docs is generated by Swag CLI
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html


func main() {
	logger.InitLogger()

	cfg := configs.Load()

	e, err := app.Initialize(cfg)
	if err != nil {
		log.Fatal().
			Err(err).
			Msg("Failed to initialize application")
	}

	// Serve Swagger UI
	e.GET("/swagger/*", echoSwagger.WrapHandler)
	// Serve Swagger JSON
	e.GET("/swagger.json", func(c echo.Context) error {
		return c.File("./docs/swagger.json")
	})

	e.Use(logger.RequestLogger())
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: cfg.Server.Cors.AllowOrigins,
		AllowMethods: cfg.Server.Cors.AllowMethods,
		AllowHeaders: cfg.Server.Cors.AllowHeaders,
	}))

	log.
		Info().
		Msg("Starting server on port " + cfg.Server.Port)

	e.Logger.Fatal(e.Start(":" + cfg.Server.Port))
}
